#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ Krisp Notes Importer

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[CHECK]${NC} $1"
}

success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[‚ö†]${NC} $1"
}

error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

ERRORS=0

log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ Krisp Notes Importer"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
log "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞..."
REQUIRED_FILES=(
    "package.json"
    "manifest.json"
    "tsconfig.json"
    "esbuild.config.mjs"
    "src/main.ts"
    "src/interfaces.ts"
    "src/core/SettingsManager.ts"
    "src/core/ProcessingService.ts"
    "src/core/LocalizationService.ts"
    "src/ui/SettingsTab.ts"
)

for file in "${REQUIRED_FILES[@]}"; do
    if [[ -f "$file" ]]; then
        success "$file"
    else
        error "$file - –û–¢–°–£–¢–°–¢–í–£–ï–¢"
        ((ERRORS++))
    fi
done

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
log "üî® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
BUILD_FILES=("main.js" "manifest.json" "styles.css")

for file in "${BUILD_FILES[@]}"; do
    if [[ -f "$file" ]]; then
        success "$file"
    else
        warning "$file - –Ω–µ —Å–æ–±—Ä–∞–Ω"
    fi
done

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π
log "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π..."
if [[ -f "package.json" ]] && [[ -f "manifest.json" ]]; then
    PACKAGE_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "ERROR")
    MANIFEST_VERSION=$(node -p "require('./manifest.json').version" 2>/dev/null || echo "ERROR")

    if [[ "$PACKAGE_VERSION" == "$MANIFEST_VERSION" ]]; then
        success "–í–µ—Ä—Å–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: $PACKAGE_VERSION"
    else
        error "–í–µ—Ä—Å–∏–∏ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: package.json=$PACKAGE_VERSION, manifest.json=$MANIFEST_VERSION"
        ((ERRORS++))
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –≤ SettingsTab.ts
    if [[ -f "src/ui/SettingsTab.ts" ]]; then
        if grep -q "v$PACKAGE_VERSION" src/ui/SettingsTab.ts; then
            success "–í–µ—Ä—Å–∏—è –≤ SettingsTab.ts –∞–∫—Ç—É–∞–ª—å–Ω–∞"
        else
            warning "–í–µ—Ä—Å–∏—è –≤ SettingsTab.ts –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–µ–π"
        fi
    fi
else
    error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏–∏"
    ((ERRORS++))
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Å—Ç–∞—Ç—É—Å–∞
log "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Å—Ç–∞—Ç—É—Å–∞..."
if command -v git &> /dev/null && [[ -d ".git" ]]; then
    if [[ -z $(git status --porcelain) ]]; then
        success "–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è"
    else
        warning "–ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        git status --porcelain | head -5
        if [[ $(git status --porcelain | wc -l) -gt 5 ]]; then
            echo "  ... –∏ –µ—â–µ $(( $(git status --porcelain | wc -l) - 5 )) —Ñ–∞–π–ª–æ–≤"
        fi
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
    LAST_COMMIT=$(git log -1 --pretty=format:"%h %s" 2>/dev/null || echo "–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤")
    success "–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: $LAST_COMMIT"
else
    warning "Git –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
log "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
if [[ -f "package.json" ]] && [[ -d "node_modules" ]]; then
    success "node_modules —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    DEPS=("obsidian" "typescript" "esbuild")
    for dep in "${DEPS[@]}"; do
        if [[ -d "node_modules/$dep" ]]; then
            success "$dep —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
            warning "$dep –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ node_modules"
        fi
    done
else
    warning "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm install"
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏
log "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏..."
if npm run build &>/dev/null; then
    success "–ü—Ä–æ–µ–∫—Ç —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫"
else
    error "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"
    ((ERRORS++))
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript
log "üìò –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript..."
if command -v npx &> /dev/null; then
    if npx tsc --noEmit &>/dev/null; then
        success "TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞"
    else
        warning "–ï—Å—Ç—å –æ—à–∏–±–∫–∏ TypeScript"
        echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: npx tsc --noEmit –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"
    fi
else
    warning "npx –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
log "üìä –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤..."
if [[ -f "main.js" ]]; then
    MAIN_SIZE=$(wc -c < main.js)
    if [[ $MAIN_SIZE -lt 1000000 ]]; then  # < 1MB
        success "main.js: $(( MAIN_SIZE / 1024 ))KB"
    else
        warning "main.js —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: $(( MAIN_SIZE / 1024 ))KB"
    fi
fi

echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
log "üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."
DOC_FILES=("README.md" "CHANGELOG.md" "docs/UserGuide.MD")
for file in "${DOC_FILES[@]}"; do
    if [[ -f "$file" ]]; then
        success "$file"
    else
        warning "$file –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    fi
done

echo ""

# –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
if [[ $ERRORS -eq 0 ]]; then
    success "üéâ –ü—Ä–æ–µ–∫—Ç –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!"
    echo ""
    echo "‚úÖ –ì–æ—Ç–æ–≤ –∫:"
    echo "  - –†–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"
    echo "  - –°–æ–∑–¥–∞–Ω–∏—é —Ä–µ–ª–∏–∑–∞"
    echo "  - –ü—É–±–ª–∏–∫–∞—Ü–∏–∏"
else
    error "‚ùå –ù–∞–π–¥–µ–Ω–æ $ERRORS –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º"
    echo ""
    echo "üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
    echo "  1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏"
    echo "  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm install"
    echo "  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run build"
    echo "  4. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É: ./scripts/check.sh"
fi

echo ""
echo "üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  ./scripts/setup.sh     - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
echo "  ./scripts/release.sh   - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞"
echo "  npm run build          - –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"

exit $ERRORS
