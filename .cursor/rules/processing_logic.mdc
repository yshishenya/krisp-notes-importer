---
description:
globs:
alwaysApply: false
---
# Основная логика обработки Krisp Notes Importer

Процесс импорта ZIP-архивов Krisp включает несколько ключевых сервисов, которые взаимодействуют для извлечения данных и создания заметок в Obsidian:

1.  **`[src/core/ProcessingService.ts](mdc:src/core/ProcessingService.ts)`**: Является координатором процесса обработки.
    *   Ответственность: Полный цикл обработки одного ZIP-файла.
    *   Метод `processZipFile(zipFilePath)` запускает всю цепочку.
    *   Взаимодействует с другими сервисами (ZipExtractor, NoteParser, NoteCreator).
    *   Обрабатывает логику дубликатов согласно настройкам.
    *   Управляет временными файлами.
    *   Подробности: `[docs/Architecture.MD#24-ProcessingService---Сервис-обработки-файлов](mdc:docs/Architecture.MD)`.

2.  **`[src/core/ZipExtractor.ts](mdc:src/core/ZipExtractor.ts)`**: Отвечает за работу с ZIP-архивами.
    *   Ответственность: Распаковка содержимого ZIP-архива во временную директорию.
    *   Методы: `extract(zipFilePath, tempDirPath)`, `cleanup(tempDirPath)`.
    *   Использует библиотеку типа `jszip`.
    *   Подробности: `[docs/Architecture.MD#25-ZipExtractor---Извлекатель-из-ZIP](mdc:docs/Architecture.MD)`.

3.  **`[src/core/NoteParser.ts](mdc:src/core/NoteParser.ts)`**: Извлекает данные из файлов заметок Krisp.
    *   Ответственность: Извлечение структурированных данных из `meeting_notes.txt` и `transcript.txt`.
    *   Методы: `parseMeetingNotes(...)`, `parseTranscript(...)` и вспомогательные методы для извлечения конкретных секций (дата, время, участники, резюме, ключевые моменты, список действий).
    *   Включает логику форматирования транскрипта.
    *   Подробности: `[docs/Architecture.MD#26-NoteParser---Парсер-заметок-Krisp](mdc:docs/Architecture.MD)`.
    *   Требования к извлекаемым данным: `[docs/SRS.MD#324-Извлечение-данных-FUNC-EXTRACT](mdc:docs/SRS.MD)`.

4.  **`[src/core/NoteCreator.ts](mdc:src/core/NoteCreator.ts)`**: Создает Markdown-заметки в Obsidian.
    *   Ответственность: Формирование содержимого Markdown-заметки на основе извлеченных данных и шаблонов.
    *   Методы: `createNote(parsedData, settings)`, `applyTemplate(templateString, data)`.
    *   Создает YAML Frontmatter и сохраняет заметку с использованием Obsidian API.
    *   Подробности: `[docs/Architecture.MD#27-NoteCreator---Создатель-заметок-Obsidian](mdc:docs/Architecture.MD)`.
    *   Требования к создаваемым заметкам: `[docs/SRS.MD#325-Создание-заметки-FUNC-CREATE-NOTE](mdc:docs/SRS.MD)`.

Поток данных при обработке ZIP-файла подробно описан в `[docs/Architecture.MD#3-Потоки-данных-и-взаимодействие](mdc:docs/Architecture.MD)`.
