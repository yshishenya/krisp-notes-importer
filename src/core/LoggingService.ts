import { Notice } from 'obsidian';

export enum LogLevel {
    DEBUG = 0,
    INFO = 1,
    WARN = 2,
    ERROR = 3
}

export interface LogEntry {
    timestamp: Date;
    level: LogLevel;
    category: string;
    message: string;
    details?: any;
}

export class LoggingService {
    private logs: LogEntry[] = [];
    private maxLogEntries: number = 1000;
    private currentLogLevel: LogLevel = LogLevel.INFO;

    constructor(logLevel: LogLevel = LogLevel.INFO) {
        this.currentLogLevel = logLevel;
        this.log(LogLevel.INFO, 'System', 'LoggingService initialized');
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private log(level: LogLevel, category: string, message: string, details?: any): void {
        if (level < this.currentLogLevel) {
            return;
        }

        const entry: LogEntry = {
            timestamp: new Date(),
            level,
            category,
            message,
            details
        };

        this.logs.push(entry);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏
        if (this.logs.length > this.maxLogEntries) {
            this.logs = this.logs.slice(-this.maxLogEntries);
        }

        // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        const levelName = LogLevel[level];
        const timestamp = entry.timestamp.toISOString();
        const logMessage = `[${timestamp}] [${levelName}] [${category}] ${message}`;

        switch (level) {
            case LogLevel.DEBUG:
                console.debug(logMessage, details);
                break;
            case LogLevel.INFO:
                console.info(logMessage, details);
                break;
            case LogLevel.WARN:
                console.warn(logMessage, details);
                break;
            case LogLevel.ERROR:
                console.error(logMessage, details);
                break;
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    debug(category: string, message: string, details?: any): void {
        this.log(LogLevel.DEBUG, category, message, details);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    info(category: string, message: string, details?: any): void {
        this.log(LogLevel.INFO, category, message, details);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
     */
    warn(category: string, message: string, details?: any): void {
        this.log(LogLevel.WARN, category, message, details);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
     */
    error(category: string, message: string, details?: any): void {
        this.log(LogLevel.ERROR, category, message, details);
    }

    /**
     * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–ª–∞–≥–∏–Ω–∞
     */

    logZipProcessingStart(zipPath: string): void {
        this.info('Processing', `–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É ZIP-—Ñ–∞–π–ª–∞: ${zipPath}`);
    }

    logZipProcessingSuccess(zipPath: string, noteName: string): void {
        this.info('Processing', `–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ZIP-—Ñ–∞–π–ª: ${zipPath}`, { noteName });
    }

    logZipProcessingError(zipPath: string, error: Error): void {
        this.error('Processing', `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ZIP-—Ñ–∞–π–ª–∞: ${zipPath}`, {
            error: error.message,
            stack: error.stack
        });
    }

    logFileWatcherStart(folderPath: string): void {
        this.info('FileWatcher', `–ó–∞–ø—É—â–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: ${folderPath}`);
    }

    logFileWatcherStop(): void {
        this.info('FileWatcher', '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    logFileWatcherError(error: Error): void {
        this.error('FileWatcher', '–û—à–∏–±–∫–∞ –≤ FileWatcher', {
            error: error.message,
            stack: error.stack
        });
    }

    logDuplicateHandling(strategy: string, fileName: string, action: string): void {
        this.info('Duplicates', `–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞: ${fileName}`, { strategy, action });
    }

    logSettingsChange(settingKey: string, oldValue: any, newValue: any): void {
        this.info('Settings', `–ò–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: ${settingKey}`, { oldValue, newValue });
    }

    logNoteCreation(notePath: string, templateUsed: string): void {
        this.info('NoteCreator', `–°–æ–∑–¥–∞–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: ${notePath}`, { templateUsed });
    }

    logAudioFileCopy(sourcePath: string, targetPath: string): void {
        this.info('AudioCopy', `–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª: ${sourcePath} -> ${targetPath}`);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏
     */
    getAllLogs(): LogEntry[] {
        return [...this.logs];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –ø–æ —É—Ä–æ–≤–Ω—é
     */
    getLogsByLevel(level: LogLevel): LogEntry[] {
        return this.logs.filter(log => log.level >= level);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    getLogsByCategory(category: string): LogEntry[] {
        return this.logs.filter(log => log.category === category);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞–ø–∏—Å–µ–π
     */
    getRecentLogs(count: number = 50): LogEntry[] {
        return this.logs.slice(-count);
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
     */
    exportLogsAsText(): string {
        const lines = this.logs.map(entry => {
            const timestamp = entry.timestamp.toISOString();
            const level = LogLevel[entry.level].padEnd(5);
            const category = entry.category.padEnd(12);
            let line = `[${timestamp}] [${level}] [${category}] ${entry.message}`;

            if (entry.details) {
                line += `\n    Details: ${JSON.stringify(entry.details, null, 2)}`;
            }

            return line;
        });

        return lines.join('\n');
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç
     */
    exportLogsAsJSON(): string {
        return JSON.stringify(this.logs, null, 2);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏
     */
    clearLogs(): void {
        const oldCount = this.logs.length;
        this.logs = [];
        this.info('System', `–û—á–∏—â–µ–Ω—ã –ª–æ–≥–∏ (–±—ã–ª–æ –∑–∞–ø–∏—Å–µ–π: ${oldCount})`);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    setLogLevel(level: LogLevel): void {
        const oldLevel = this.currentLogLevel;
        this.currentLogLevel = level;
        this.info('System', `–ò–∑–º–µ–Ω–µ–Ω —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: ${LogLevel[oldLevel]} -> ${LogLevel[level]}`);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤
     */
    getLogStats(): { total: number; byLevel: Record<string, number>; byCategory: Record<string, number> } {
        const byLevel: Record<string, number> = {};
        const byCategory: Record<string, number> = {};

        this.logs.forEach(log => {
            const levelName = LogLevel[log.level];
            byLevel[levelName] = (byLevel[levelName] || 0) + 1;
            byCategory[log.category] = (byCategory[log.category] || 0) + 1;
        });

        return {
            total: this.logs.length,
            byLevel,
            byCategory
        };
    }

    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ (–¥–ª—è UI)
     */
    async copyLogsToClipboard(): Promise<void> {
        try {
            const logsText = this.exportLogsAsText();
            await navigator.clipboard.writeText(logsText);
            new Notice('üìã Logs copied to clipboard', 3000);
            this.info('System', '–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        } catch (error) {
            this.error('System', '–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', error);
            new Notice('‚ùå Error copying logs', 5000);
        }
    }
}
