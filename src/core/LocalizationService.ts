export type SupportedLanguage = 'en' | 'ru';

export interface LocalizedStrings {
    // Settings UI
    settings: {
        title: string;
        sections: {
            basic: string;
            storage: string;
            templates: string;
            duplicates: string;
            postImport: string;
            advanced: string;
            coreAutomation: string;
            namingAndTemplates: string;
            importBehavior: string;
            manualOperations: string;
            aboutPlugin: string;
        };
        fields: {
            watchedFolder: {
                name: string;
                desc: string;
            };
            autoScan: {
                name: string;
                desc: string;
            };
            notesFolder: {
                name: string;
                desc: string;
            };
            attachmentsFolder: {
                name: string;
                desc: string;
            };
            noteNameTemplate: {
                name: string;
                desc: string;
            };
            attachmentNameTemplate: {
                name: string;
                desc: string;
            };
            noteContentTemplate: {
                name: string;
                desc: string;
            };
            duplicateStrategy: {
                name: string;
                desc: string;
                options: {
                    skip: string;
                    overwrite: string;
                    rename: string;
                };
            };
            deleteZipAfterImport: {
                name: string;
                desc: string;
            };
            openNoteAfterImport: {
                name: string;
                desc: string;
            };
            language: {
                name: string;
                desc: string;
            };
        };
        buttons: {
            testImport: string;
            massImport: string;
            resetSettings: string;
            showLogs: string;
            restoreTemplate: string;
            restoreImprovedTemplate: string;
            restoreCompactTemplate: string;
        };
        info: {
            title: string;
            version: string;
            status: string;
            features: string[];
            commands: string[];
            errors: {
                watchedFolderMissing: string;
                watchedFolderEmptyAutoscan: string;
            };
        };
        status: {
            title: string;
            watchingActive: string;
            watchingInactive: string;
            watchingWarningFolderMissing: string;
            watchingStarting: string;
            inactiveDetailEnableAutoScan: string;
            inactiveDetailSetPath: string;
            serviceUnavailable: string;
        };
    };

    // Commands
    commands: {
        importZip: string;
        startWatching: string;
        stopWatching: string;
        scanExisting: string;
        checkStatus: string;
        debugSettings: string;
        scanExistingDesc: string;
    };

    // Notifications
    notifications: {
        success: {
            imported: string;
            watchingStarted: string;
            watchingStopped: string;
            settingsReset: string;
        };
        error: {
            invalidZip: string;
            missingFiles: string;
            createNote: string;
            copyAudio: string;
            watchingFailed: string;
            noFileSelected: string;
            importFailedGeneral: string;
            massImportFailed: string;
        };
        warning: {
            duplicateSkipped: string;
            duplicateRenamed: string;
            duplicateOverwritten: string;
        };
        info: {
            processing: string;
            scanningFolder: string;
            scanningFolderComplete: string;
        };
    };

    // Status bar
    statusBar: {
        idle: string;
        watching: string;
        processing: string;
        error: string;
    };

    // Modals
    modals: {
        testImport: {
            title: string;
            placeholder: string;
            button: string;
            description: string;
            importing: string;
        };
        confirmReset: {
            title: string;
            message: string;
            confirm: string;
            cancel: string;
        };
        logs: {
            title: string;
            export: string;
            clear: string;
            close: string;
            description: string;
            noLogs: string;
            copy: string;
            copiedNotice: string;
            clearedNotice: string;
        };
    };

    // New section for settings.info tooltips and links, can be nested under settings.info if preferred
    settingsInfoTooltips: {
        githubRepoTooltip: string;
        reportIssueTooltip: string;
        developer: string;
        supportDevelopment: string;
        donateLinkText: string;
        pluginDescription: string;
        resetSettingsDesc: string;
        supportDevelopmentPlaceholder: string;
    };
}

const EN_STRINGS: LocalizedStrings = {
    settings: {
        title: "Krisp Notes Importer Settings",
        sections: {
            basic: "üîß Basic Settings",
            storage: "üíæ Obsidian Storage",
            templates: "üìù Templates & Naming",
            duplicates: "üîÑ Duplicate Handling",
            postImport: "‚ö° Post-Import Actions",
            advanced: "üõ†Ô∏è Advanced & Maintenance",
            coreAutomation: "üìÇ Core: Watching & Automation",
            namingAndTemplates: "üé® Appearance & Naming",
            importBehavior: "‚öôÔ∏è Import Behavior",
            manualOperations: "üõ†Ô∏è Manual Operations & Diagnostics",
            aboutPlugin: "‚ÑπÔ∏è About Plugin"
        },
        fields: {
            watchedFolder: {
                name: "Watched Folder Path",
                desc: "Full path to the folder where Krisp saves ZIP archives"
            },
            autoScan: {
                name: "Enable Auto-Watching",
                desc: "Automatically monitor the folder for new ZIP files"
            },
            notesFolder: {
                name: "Notes Folder",
                desc: "Folder in your Obsidian vault for saving meeting notes"
            },
            attachmentsFolder: {
                name: "Attachments Folder",
                desc: "Folder in your Obsidian vault for saving audio files"
            },
            noteNameTemplate: {
                name: "Note Name Template",
                desc: "Template for naming note files. Available variables: {{YYYY}}, {{MM}}, {{DD}}, {{HHMM}}, {{meetingTitle}}"
            },
            attachmentNameTemplate: {
                name: "Audio Name Template",
                desc: "Template for naming audio files. Same variables available"
            },
            noteContentTemplate: {
                name: "Note Content Template",
                desc: "Template for note content. Available variables: {{title}}, {{date}}, {{time}}, {{participants}}, {{summary}}, {{actionItems}}, {{keyPoints}}, {{transcript}}, {{audioLink}}"
            },
            duplicateStrategy: {
                name: "Duplicate Strategy",
                desc: "What to do when a meeting with the same name already exists",
                options: {
                    skip: "Skip import",
                    overwrite: "Overwrite existing",
                    rename: "Create with suffix"
                }
            },
            deleteZipAfterImport: {
                name: "Delete ZIP after import",
                desc: "Automatically delete the ZIP file after successful import"
            },
            openNoteAfterImport: {
                name: "Open note after import",
                desc: "Automatically open the created note in Obsidian"
            },
            language: {
                name: "Interface Language",
                desc: "Choose the language for the plugin interface"
            }
        },
        buttons: {
            testImport: "Test Import",
            massImport: "Import All Files",
            resetSettings: "Reset Settings",
            showLogs: "Show Logs",
            restoreTemplate: "Restore Default Template",
            restoreImprovedTemplate: "Use Improved Template",
            restoreCompactTemplate: "Use Compact Template"
        },
        info: {
            title: "Plugin Information",
            version: "Version",
            status: "Status",
            features: [
                "‚úÖ Manual ZIP import",
                "‚úÖ Automatic folder watching",
                "‚úÖ Beautiful note formatting with callouts",
                "‚úÖ Advanced participant analytics",
                "‚úÖ Complete UI settings",
                "‚úÖ Logging and diagnostic system",
                "‚úÖ Bilingual support (English/Russian)"
            ],
            commands: [
                "Import ZIP file manually",
                "Start auto-watching folder",
                "Stop auto-watching",
                "Scan existing files",
                "Check watching status",
                "Debug current settings"
            ],
            errors: {
                watchedFolderMissing: "Watched folder path is not specified. Auto-watching cannot start.",
                watchedFolderEmptyAutoscan: "Watched folder path is empty. Auto-watching stopped if it was active for a previous path."
            }
        },
        status: {
            title: "üìä Current Status",
            watchingActive: "Auto-watching is ACTIVE for folder: {{path}}",
            watchingInactive: "Auto-watching is INACTIVE.",
            watchingWarningFolderMissing: "Auto-watching is ON, but no folder specified. Please set the 'Watched Folder Path'.",
            watchingStarting: "Auto-watching is starting...",
            inactiveDetailEnableAutoScan: "Hint: Enable 'Enable Auto-Watching' option.",
            inactiveDetailSetPath: "Hint: Set the 'Watched Folder Path'.",
            serviceUnavailable: "File Watcher Service is not available. Please check plugin logs or restart Obsidian."
        }
    },
    commands: {
        importZip: "Import ZIP file manually",
        startWatching: "Start auto-watching folder",
        stopWatching: "Stop auto-watching",
        scanExisting: "Process All Existing Files",
        checkStatus: "Check watching status",
        debugSettings: "Debug current settings",
        scanExistingDesc: "Scan the watched folder and import all existing ZIP files that haven't been processed yet."
    },
    notifications: {
        success: {
            imported: "Successfully imported: {{fileName}}",
            watchingStarted: "Started watching folder: {{folderPath}}",
            watchingStopped: "Stopped watching folder.",
            settingsReset: "Settings have been reset to default."
        },
        error: {
            invalidZip: "Invalid ZIP file: {{fileName}}",
            missingFiles: "Missing required files in ZIP: {{fileName}}",
            createNote: "Error creating note for: {{fileName}} - {{error}}",
            copyAudio: "Error copying audio for: {{fileName}} - {{error}}",
            watchingFailed: "Failed to start watching: {{error}}",
            noFileSelected: "No file selected.",
            importFailedGeneral: "Import failed: {{error}}",
            massImportFailed: "Mass import failed. Check logs for details."
        },
        warning: {
            duplicateSkipped: "Skipped duplicate: {{fileName}}",
            duplicateRenamed: "Renamed duplicate: {{newName}} from {{originalName}}",
            duplicateOverwritten: "Overwritten duplicate: {{fileName}}"
        },
        info: {
            processing: "Processing: {{fileName}}...",
            scanningFolder: "Scanning folder: {{folderPath}}...",
            scanningFolderComplete: "Folder scan and import complete!"
        }
    },
    statusBar: {
        idle: "Idle",
        watching: "Watching: {{path}}",
        processing: "Processing...",
        error: "Error: {{message}}"
    },
    modals: {
        testImport: {
            title: "Test Manual Import",
            placeholder: "Select Krisp ZIP file...",
            button: "Import Selected File",
            description: "Manually select a ZIP file to test the import process.",
            importing: "Importing..."
        },
        confirmReset: {
            title: "Confirm Reset",
            message: "Are you sure you want to reset all settings to their default values? This action cannot be undone.",
            confirm: "Reset Settings",
            cancel: "Cancel"
        },
        logs: {
            title: "Plugin Logs",
            export: "Export Logs",
            clear: "Clear Logs",
            close: "Close",
            description: "View recent activity logs for troubleshooting.",
            noLogs: "No logs yet.",
            copy: "Copy Logs",
            copiedNotice: "Logs copied to clipboard!",
            clearedNotice: "Logs cleared!"
        }
    },
    settingsInfoTooltips: {
        githubRepoTooltip: "Visit GitHub Repository",
        reportIssueTooltip: "Report an Issue",
        developer: "Developed by: {{author}}",
        supportDevelopment: "If you find this plugin useful, consider supporting its development: ",
        donateLinkText: "Buy Me a Coffee",
        pluginDescription: "Description: {{description}}",
        resetSettingsDesc: "Reset all plugin settings to their default values.",
        supportDevelopmentPlaceholder: "Support information for this plugin is not specified by the author."
    }
};

const RU_STRINGS: LocalizedStrings = {
    settings: {
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Krisp Notes Importer",
        sections: {
            basic: "üîß –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            storage: "üíæ –•—Ä–∞–Ω–µ–Ω–∏–µ –≤ Obsidian",
            templates: "üìù –®–∞–±–ª–æ–Ω—ã –∏ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
            duplicates: "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤",
            postImport: "‚ö° –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞",
            advanced: "üõ†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏ –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
            coreAutomation: "üìÇ –Ø–¥—Ä–æ: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
            namingAndTemplates: "üé® –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∏ –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
            importBehavior: "‚öôÔ∏è –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞",
            manualOperations: "üõ†Ô∏è –†—É—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
            aboutPlugin: "‚ÑπÔ∏è –û –ø–ª–∞–≥–∏–Ω–µ"
        },
        fields: {
            watchedFolder: {
                name: "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –ø–∞–ø–∫–∞",
                desc: "–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ Krisp —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç ZIP-–∞—Ä—Ö–∏–≤—ã"
            },
            autoScan: {
                name: "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ",
                desc: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∞–ø–∫—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã—Ö ZIP-—Ñ–∞–π–ª–æ–≤"
            },
            notesFolder: {
                name: "–ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫",
                desc: "–ü–∞–ø–∫–∞ –≤ –≤–∞—à–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Obsidian –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –≤—Å—Ç—Ä–µ—á"
            },
            attachmentsFolder: {
                name: "–ü–∞–ø–∫–∞ –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π",
                desc: "–ü–∞–ø–∫–∞ –≤ –≤–∞—à–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Obsidian –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"
            },
            noteNameTemplate: {
                name: "–®–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ –∑–∞–º–µ—Ç–∫–∏",
                desc: "–®–∞–±–ª–æ–Ω –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∑–∞–º–µ—Ç–æ–∫. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {{YYYY}}, {{MM}}, {{DD}}, {{HHMM}}, {{meetingTitle}}"
            },
            attachmentNameTemplate: {
                name: "–®–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ –∞—É–¥–∏–æ",
                desc: "–®–∞–±–ª–æ–Ω –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤. –î–æ—Å—Ç—É–ø–Ω—ã —Ç–µ –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
            },
            noteContentTemplate: {
                name: "–®–∞–±–ª–æ–Ω —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–º–µ—Ç–∫–∏",
                desc: "–®–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–º–µ—Ç–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {{title}}, {{date}}, {{time}}, {{participants}}, {{summary}}, {{actionItems}}, {{keyPoints}}, {{transcript}}, {{audioLink}}"
            },
            duplicateStrategy: {
                name: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤",
                desc: "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –∫–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞ —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                options: {
                    skip: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç",
                    overwrite: "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é",
                    rename: "–°–æ–∑–¥–∞—Ç—å —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º"
                }
            },
            deleteZipAfterImport: {
                name: "–£–¥–∞–ª—è—Ç—å ZIP –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞",
                desc: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å ZIP-—Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞"
            },
            openNoteAfterImport: {
                name: "–û—Ç–∫—Ä—ã–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞",
                desc: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É –≤ Obsidian"
            },
            language: {
                name: "–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                desc: "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–ª–∞–≥–∏–Ω–∞"
            }
        },
        buttons: {
            testImport: "–¢–µ—Å—Ç–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç",
            massImport: "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã",
            resetSettings: "–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            showLogs: "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏",
            restoreTemplate: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω",
            restoreImprovedTemplate: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω",
            restoreCompactTemplate: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω"
        },
        info: {
            title: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–≥–∏–Ω–µ",
            version: "–í–µ—Ä—Å–∏—è",
            status: "–°—Ç–∞—Ç—É—Å",
            features: [
                "‚úÖ –†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç ZIP",
                "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏",
                "‚úÖ –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ —Å callouts",
                "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                "‚úÖ –ü–æ–ª–Ω—ã–π UI –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                "‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
                "‚úÖ –î–≤—É—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (English/–†—É—Å—Å–∫–∏–π)"
            ],
            commands: [
                "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ZIP-—Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é",
                "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏",
                "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ",
                "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
                "–û—Ç–ª–∞–¥–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            ],
            errors: {
                watchedFolderMissing: "–ü—É—Ç—å –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –ø–∞–ø–∫–µ –Ω–µ —É–∫–∞–∑–∞–Ω. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ.",
                watchedFolderEmptyAutoscan: "–ü—É—Ç—å –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –ø–∞–ø–∫–µ –ø—É—Å—Ç. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –µ—Å–ª–∏ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—É—Ç–∏."
            }
        },
        status: {
            title: "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å",
            watchingActive: "–ê–≤—Ç–æ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ê–ö–¢–ò–í–ù–û –¥–ª—è –ø–∞–ø–∫–∏: {{path}}",
            watchingInactive: "–ê–≤—Ç–æ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ù–ï–ê–ö–¢–ò–í–ù–û.",
            watchingWarningFolderMissing: "–ê–≤—Ç–æ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –í–ö–õ–Æ–ß–ï–ù–û, –Ω–æ –ø–∞–ø–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –£–∫–∞–∂–∏—Ç–µ '–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –ø–∞–ø–∫–∞'.",
            watchingStarting: "–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è...",
            inactiveDetailEnableAutoScan: "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –í–∫–ª—é—á–∏—Ç–µ –æ–ø—Ü–∏—é '–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ'.",
            inactiveDetailSetPath: "–ü–æ–¥—Å–∫–∞–∑–∫–∞: –£–∫–∞–∂–∏—Ç–µ '–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –ø–∞–ø–∫–∞'.",
            serviceUnavailable: "–°–µ—Ä–≤–∏—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø–ª–∞–≥–∏–Ω–∞ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Obsidian."
        }
    },
    commands: {
        importZip: "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ZIP-—Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é",
        startWatching: "–ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏",
        stopWatching: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ",
        scanExisting: "–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã",
        checkStatus: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
        debugSettings: "–û—Ç–ª–∞–¥–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        scanExistingDesc: "–ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—É—é –ø–∞–ø–∫—É –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ZIP-—Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã."
    },
    notifications: {
        success: {
            imported: "–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {{fileName}}",
            watchingStarted: "–ù–∞—á–∞—Ç–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: {{folderPath}}",
            watchingStopped: "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.",
            settingsReset: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."
        },
        error: {
            invalidZip: "–ù–µ–≤–µ—Ä–Ω—ã–π ZIP-—Ñ–∞–π–ª: {{fileName}}",
            missingFiles: "–í ZIP –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã: {{fileName}}",
            createNote: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è: {{fileName}} - {{error}}",
            copyAudio: "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –¥–ª—è: {{fileName}} - {{error}}",
            watchingFailed: "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {{error}}",
            noFileSelected: "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.",
            importFailedGeneral: "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {{error}}",
            massImportFailed: "–ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
        },
        warning: {
            duplicateSkipped: "–ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: {{fileName}}",
            duplicateRenamed: "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –¥—É–±–ª–∏–∫–∞—Ç: {{newName}} –∏–∑ {{originalName}}",
            duplicateOverwritten: "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –¥—É–±–ª–∏–∫–∞—Ç: {{fileName}}"
        },
        info: {
            processing: "–û–±—Ä–∞–±–æ—Ç–∫–∞: {{fileName}}...",
            scanningFolder: "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: {{folderPath}}...",
            scanningFolderComplete: "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∏ –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"
        }
    },
    statusBar: {
        idle: "–û–∂–∏–¥–∞–Ω–∏–µ",
        watching: "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {{path}}",
        processing: "–û–±—Ä–∞–±–æ—Ç–∫–∞...",
        error: "–û—à–∏–±–∫–∞: {{message}}"
    },
    modals: {
        testImport: {
            title: "–¢–µ—Å—Ç–æ–≤—ã–π —Ä—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç",
            placeholder: "–í—ã–±–µ—Ä–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ Krisp...",
            button: "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª",
            description: "–í—ã–±–µ—Ä–∏—Ç–µ ZIP-–∞—Ä—Ö–∏–≤ –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞.",
            importing: "–ò–º–ø–æ—Ä—Ç..."
        },
        confirmReset: {
            title: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–±—Ä–æ—Å",
            message: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.",
            confirm: "–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            cancel: "–û—Ç–º–µ–Ω–∞"
        },
        logs: {
            title: "–õ–æ–≥–∏ –ø–ª–∞–≥–∏–Ω–∞",
            export: "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏",
            clear: "–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏",
            close: "–ó–∞–∫—Ä—ã—Ç—å",
            description: "–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–¥–∞–≤–Ω–∏—Ö –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–ø–æ–ª–∞–¥–æ–∫.",
            noLogs: "–õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
            copy: "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏",
            copiedNotice: "–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!",
            clearedNotice: "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã!"
        }
    },
    settingsInfoTooltips: {
        githubRepoTooltip: "–ü–æ—Å–µ—Ç–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub",
        reportIssueTooltip: "–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ",
        developer: "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ: {{author}}",
        supportDevelopment: "–ï—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ —ç—Ç–æ—Ç –ø–ª–∞–≥–∏–Ω –ø–æ–ª–µ–∑–Ω—ã–º, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ",
        donateLinkText: "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞",
        pluginDescription: "–û–ø–∏—Å–∞–Ω–∏–µ: {{description}}",
        resetSettingsDesc: "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
        supportDevelopmentPlaceholder: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∞–≤—Ç–æ—Ä–æ–º."
    }
};

export class LocalizationService {
    private currentLanguage: SupportedLanguage = 'en';
    private strings: Record<SupportedLanguage, LocalizedStrings> = {
        en: EN_STRINGS,
        ru: RU_STRINGS
    };

    constructor(language?: SupportedLanguage) {
        if (language) {
            this.currentLanguage = language;
        }
    }

    setLanguage(language: SupportedLanguage): void {
        this.currentLanguage = language;
    }

    getCurrentLanguage(): SupportedLanguage {
        return this.currentLanguage;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ –∫–ª—é—á—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
     * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –æ–¥–Ω–∏–º –ø—Ä–æ—Ö–æ–¥–æ–º –ø–æ –∫–ª—é—á–∞–º
     */
    t(key: string, variables?: Record<string, string>): string {
        const keys = key.split('.');

        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
        const currentLangValue = this.getValueByKeys(this.strings[this.currentLanguage], keys);
        const englishValue = this.currentLanguage !== 'en'
            ? this.getValueByKeys(this.strings.en, keys)
            : null;

        // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        const finalValue = currentLangValue ?? englishValue;

        if (typeof finalValue !== 'string') {
            return `[Missing: ${key}]`;
        }

        // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        return this.replaceVariables(finalValue, variables);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –º–∞—Å—Å–∏–≤—É –∫–ª—é—á–µ–π –∑–∞ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
     */
    private getValueByKeys(obj: any, keys: string[]): any {
        let current = obj;

        for (const k of keys) {
            if (current && typeof current === 'object' && k in current) {
                current = current[k];
            } else {
                return null; // –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
            }
        }

        return current;
    }

    /**
     * –ó–∞–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ
     */
    private replaceVariables(text: string, variables?: Record<string, string>): string {
        if (!variables) {
            return text;
        }

        let result = text;
        for (const [varKey, varValue] of Object.entries(variables)) {
            result = result.replace(new RegExp(`{{${varKey}}}`, 'g'), varValue);
        }

        return result;
    }

    // Convenience methods for common translations
    getSettingsStrings() {
        return this.strings[this.currentLanguage].settings;
    }

    getCommandStrings() {
        return this.strings[this.currentLanguage].commands;
    }

    getNotificationStrings() {
        return this.strings[this.currentLanguage].notifications;
    }

    getStatusBarStrings() {
        return this.strings[this.currentLanguage].statusBar;
    }

    getModalStrings() {
        return this.strings[this.currentLanguage].modals;
    }
}
