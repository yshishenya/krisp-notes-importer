export type SupportedLanguage = 'en' | 'ru';

export interface LocalizedStrings {
    // Settings UI
    settings: {
        title: string;
        sections: {
            basic: string;
            storage: string;
            templates: string;
            duplicates: string;
            postImport: string;
            advanced: string;
        };
        fields: {
            watchedFolder: {
                name: string;
                desc: string;
            };
            autoScan: {
                name: string;
                desc: string;
            };
            notesFolder: {
                name: string;
                desc: string;
            };
            attachmentsFolder: {
                name: string;
                desc: string;
            };
            noteNameTemplate: {
                name: string;
                desc: string;
            };
            attachmentNameTemplate: {
                name: string;
                desc: string;
            };
            noteContentTemplate: {
                name: string;
                desc: string;
            };
            duplicateStrategy: {
                name: string;
                desc: string;
                options: {
                    skip: string;
                    overwrite: string;
                    rename: string;
                };
            };
            deleteZipAfterImport: {
                name: string;
                desc: string;
            };
            openNoteAfterImport: {
                name: string;
                desc: string;
            };
            language: {
                name: string;
                desc: string;
            };
        };
        buttons: {
            testImport: string;
            massImport: string;
            resetSettings: string;
            showLogs: string;
            restoreTemplate: string;
        };
        info: {
            title: string;
            version: string;
            status: string;
            features: string[];
            commands: string[];
        };
    };

    // Commands
    commands: {
        importZip: string;
        startWatching: string;
        stopWatching: string;
        scanExisting: string;
        checkStatus: string;
        debugSettings: string;
    };

    // Notifications
    notifications: {
        success: {
            imported: string;
            watchingStarted: string;
            watchingStopped: string;
            settingsReset: string;
        };
        error: {
            invalidZip: string;
            missingFiles: string;
            createNote: string;
            copyAudio: string;
            watchingFailed: string;
        };
        warning: {
            duplicateSkipped: string;
            duplicateRenamed: string;
            duplicateOverwritten: string;
        };
        info: {
            processing: string;
            scanningFolder: string;
        };
    };

    // Status bar
    statusBar: {
        idle: string;
        watching: string;
        processing: string;
        error: string;
    };

    // Modals
    modals: {
        testImport: {
            title: string;
            placeholder: string;
            button: string;
        };
        confirmReset: {
            title: string;
            message: string;
            confirm: string;
            cancel: string;
        };
        logs: {
            title: string;
            export: string;
            clear: string;
            close: string;
        };
    };
}

const EN_STRINGS: LocalizedStrings = {
    settings: {
        title: "Krisp Notes Importer Settings",
        sections: {
            basic: "üîß Basic Settings",
            storage: "üíæ Obsidian Storage",
            templates: "üìù Templates & Naming",
            duplicates: "üîÑ Duplicate Handling",
            postImport: "‚ö° Post-Import Actions",
            advanced: "üõ†Ô∏è Advanced & Maintenance"
        },
        fields: {
            watchedFolder: {
                name: "Watched Folder Path",
                desc: "Full path to the folder where Krisp saves ZIP archives"
            },
            autoScan: {
                name: "Enable Auto-Watching",
                desc: "Automatically monitor the folder for new ZIP files"
            },
            notesFolder: {
                name: "Notes Folder",
                desc: "Folder in your Obsidian vault for saving meeting notes"
            },
            attachmentsFolder: {
                name: "Attachments Folder",
                desc: "Folder in your Obsidian vault for saving audio files"
            },
            noteNameTemplate: {
                name: "Note Name Template",
                desc: "Template for naming note files. Available variables: {{YYYY}}, {{MM}}, {{DD}}, {{HHMM}}, {{meetingTitle}}"
            },
            attachmentNameTemplate: {
                name: "Audio Name Template",
                desc: "Template for naming audio files. Same variables available"
            },
            noteContentTemplate: {
                name: "Note Content Template",
                desc: "Template for note content. Available variables: {{title}}, {{date}}, {{time}}, {{participants}}, {{summary}}, {{actionItems}}, {{keyPoints}}, {{transcript}}, {{audioLink}}"
            },
            duplicateStrategy: {
                name: "Duplicate Strategy",
                desc: "What to do when a meeting with the same name already exists",
                options: {
                    skip: "Skip import",
                    overwrite: "Overwrite existing",
                    rename: "Create with suffix"
                }
            },
            deleteZipAfterImport: {
                name: "Delete ZIP after import",
                desc: "Automatically delete the ZIP file after successful import"
            },
            openNoteAfterImport: {
                name: "Open note after import",
                desc: "Automatically open the created note in Obsidian"
            },
            language: {
                name: "Interface Language",
                desc: "Choose the language for the plugin interface"
            }
        },
        buttons: {
            testImport: "Test Import",
            massImport: "Import All Files",
            resetSettings: "Reset Settings",
            showLogs: "Show Logs",
            restoreTemplate: "Restore Default Template"
        },
        info: {
            title: "Plugin Information",
            version: "Version",
            status: "Status",
            features: [
                "‚úÖ Manual ZIP import",
                "‚úÖ Automatic folder watching",
                "‚úÖ Beautiful note formatting with callouts",
                "‚úÖ Advanced participant analytics",
                "‚úÖ Complete UI settings",
                "‚úÖ Logging and diagnostic system",
                "‚úÖ Bilingual support (English/Russian)"
            ],
            commands: [
                "Import ZIP file manually",
                "Start auto-watching folder",
                "Stop auto-watching",
                "Scan existing files",
                "Check watching status",
                "Debug current settings"
            ]
        }
    },
    commands: {
        importZip: "Import ZIP file manually",
        startWatching: "Start auto-watching folder",
        stopWatching: "Stop auto-watching",
        scanExisting: "Scan existing files in folder",
        checkStatus: "Check watching status",
        debugSettings: "Debug current settings"
    },
    notifications: {
        success: {
            imported: "Meeting '{{title}}' imported successfully!",
            watchingStarted: "Auto-watching started for: {{path}}",
            watchingStopped: "Auto-watching stopped",
            settingsReset: "Settings reset to defaults"
        },
        error: {
            invalidZip: "Invalid ZIP file: {{file}}",
            missingFiles: "Required files not found in: {{file}}",
            createNote: "Failed to create note for: {{title}}",
            copyAudio: "Failed to copy audio file for: {{title}}",
            watchingFailed: "Failed to start watching: {{error}}"
        },
        warning: {
            duplicateSkipped: "Meeting '{{title}}' already exists - skipped",
            duplicateRenamed: "Meeting '{{title}}' already exists - created as '{{newTitle}}'",
            duplicateOverwritten: "Meeting '{{title}}' already exists - overwritten"
        },
        info: {
            processing: "Processing: {{file}}",
            scanningFolder: "Scanning folder for ZIP files..."
        }
    },
    statusBar: {
        idle: "Idle",
        watching: "Watching: {{path}}",
        processing: "Processing...",
        error: "Error: {{message}}"
    },
    modals: {
        testImport: {
            title: "Test Import ZIP File",
            placeholder: "Enter full path to ZIP file...",
            button: "Test Import"
        },
        confirmReset: {
            title: "Reset Settings",
            message: "Are you sure you want to reset all settings to defaults? This action cannot be undone.",
            confirm: "Reset",
            cancel: "Cancel"
        },
        logs: {
            title: "Plugin Logs",
            export: "Export",
            clear: "Clear",
            close: "Close"
        }
    }
};

const RU_STRINGS: LocalizedStrings = {
    settings: {
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Krisp Notes Importer",
        sections: {
            basic: "üîß –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            storage: "üíæ –•—Ä–∞–Ω–µ–Ω–∏–µ –≤ Obsidian",
            templates: "üìù –®–∞–±–ª–æ–Ω—ã –∏ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
            duplicates: "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤",
            postImport: "‚ö° –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞",
            advanced: "üõ†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
        },
        fields: {
            watchedFolder: {
                name: "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –ø–∞–ø–∫–∞",
                desc: "–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ Krisp —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç ZIP-–∞—Ä—Ö–∏–≤—ã"
            },
            autoScan: {
                name: "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ",
                desc: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–∞–ø–∫—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã—Ö ZIP-—Ñ–∞–π–ª–æ–≤"
            },
            notesFolder: {
                name: "–ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫",
                desc: "–ü–∞–ø–∫–∞ –≤ –≤–∞—à–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Obsidian –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –≤—Å—Ç—Ä–µ—á"
            },
            attachmentsFolder: {
                name: "–ü–∞–ø–∫–∞ –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π",
                desc: "–ü–∞–ø–∫–∞ –≤ –≤–∞—à–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Obsidian –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"
            },
            noteNameTemplate: {
                name: "–®–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ –∑–∞–º–µ—Ç–∫–∏",
                desc: "–®–∞–±–ª–æ–Ω –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∑–∞–º–µ—Ç–æ–∫. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {{YYYY}}, {{MM}}, {{DD}}, {{HHMM}}, {{meetingTitle}}"
            },
            attachmentNameTemplate: {
                name: "–®–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ –∞—É–¥–∏–æ",
                desc: "–®–∞–±–ª–æ–Ω –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤. –î–æ—Å—Ç—É–ø–Ω—ã —Ç–µ –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
            },
            noteContentTemplate: {
                name: "–®–∞–±–ª–æ–Ω —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–º–µ—Ç–∫–∏",
                desc: "–®–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–º–µ—Ç–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {{title}}, {{date}}, {{time}}, {{participants}}, {{summary}}, {{actionItems}}, {{keyPoints}}, {{transcript}}, {{audioLink}}"
            },
            duplicateStrategy: {
                name: "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤",
                desc: "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –∫–æ–≥–¥–∞ –≤—Å—Ç—Ä–µ—á–∞ —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                options: {
                    skip: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç",
                    overwrite: "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é",
                    rename: "–°–æ–∑–¥–∞—Ç—å —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º"
                }
            },
            deleteZipAfterImport: {
                name: "–£–¥–∞–ª—è—Ç—å ZIP –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞",
                desc: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å ZIP-—Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞"
            },
            openNoteAfterImport: {
                name: "–û—Ç–∫—Ä—ã–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞",
                desc: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É –≤ Obsidian"
            },
            language: {
                name: "–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
                desc: "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–ª–∞–≥–∏–Ω–∞"
            }
        },
        buttons: {
            testImport: "–¢–µ—Å—Ç–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç",
            massImport: "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã",
            resetSettings: "–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            showLogs: "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏",
            restoreTemplate: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω"
        },
        info: {
            title: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–≥–∏–Ω–µ",
            version: "–í–µ—Ä—Å–∏—è",
            status: "–°—Ç–∞—Ç—É—Å",
            features: [
                "‚úÖ –†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç ZIP",
                "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏",
                "‚úÖ –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ —Å callouts",
                "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                "‚úÖ –ü–æ–ª–Ω—ã–π UI –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                "‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
                "‚úÖ –î–≤—É—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (English/–†—É—Å—Å–∫–∏–π)"
            ],
            commands: [
                "–†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç ZIP-—Ñ–∞–π–ª–∞",
                "–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏",
                "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
                "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤",
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
                "–û—Ç–ª–∞–¥–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            ]
        }
    },
    commands: {
        importZip: "–†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç ZIP-—Ñ–∞–π–ª–∞",
        startWatching: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏",
        stopWatching: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ",
        scanExisting: "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ",
        checkStatus: "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è",
        debugSettings: "–û—Ç–ª–∞–¥–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    },
    notifications: {
        success: {
            imported: "–í—Å—Ç—Ä–µ—á–∞ '{{title}}' —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞!",
            watchingStarted: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è: {{path}}",
            watchingStopped: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
            settingsReset: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        },
        error: {
            invalidZip: "–ù–µ–≤–µ—Ä–Ω—ã–π ZIP-—Ñ–∞–π–ª: {{file}}",
            missingFiles: "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤: {{file}}",
            createNote: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É –¥–ª—è: {{title}}",
            copyAudio: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è: {{title}}",
            watchingFailed: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {{error}}"
        },
        warning: {
            duplicateSkipped: "–í—Å—Ç—Ä–µ—á–∞ '{{title}}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–ø—É—â–µ–Ω–∞",
            duplicateRenamed: "–í—Å—Ç—Ä–µ—á–∞ '{{title}}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ–∑–¥–∞–Ω–∞ –∫–∞–∫ '{{newTitle}}'",
            duplicateOverwritten: "–í—Å—Ç—Ä–µ—á–∞ '{{title}}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞"
        },
        info: {
            processing: "–û–±—Ä–∞–±–æ—Ç–∫–∞: {{file}}",
            scanningFolder: "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç ZIP-—Ñ–∞–π–ª–æ–≤..."
        }
    },
    statusBar: {
        idle: "–û–∂–∏–¥–∞–Ω–∏–µ",
        watching: "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {{path}}",
        processing: "–û–±—Ä–∞–±–æ—Ç–∫–∞...",
        error: "–û—à–∏–±–∫–∞: {{message}}"
    },
    modals: {
        testImport: {
            title: "–¢–µ—Å—Ç–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç ZIP-—Ñ–∞–π–ª–∞",
            placeholder: "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ ZIP-—Ñ–∞–π–ª—É...",
            button: "–¢–µ—Å—Ç–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç"
        },
        confirmReset: {
            title: "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            message: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            confirm: "–°–±—Ä–æ—Å–∏—Ç—å",
            cancel: "–û—Ç–º–µ–Ω–∞"
        },
        logs: {
            title: "–õ–æ–≥–∏ –ø–ª–∞–≥–∏–Ω–∞",
            export: "–≠–∫—Å–ø–æ—Ä—Ç",
            clear: "–û—á–∏—Å—Ç–∏—Ç—å",
            close: "–ó–∞–∫—Ä—ã—Ç—å"
        }
    }
};

export class LocalizationService {
    private currentLanguage: SupportedLanguage = 'en';
    private strings: Record<SupportedLanguage, LocalizedStrings> = {
        en: EN_STRINGS,
        ru: RU_STRINGS
    };

    constructor(language?: SupportedLanguage) {
        if (language) {
            this.currentLanguage = language;
        }
    }

    setLanguage(language: SupportedLanguage): void {
        this.currentLanguage = language;
    }

    getCurrentLanguage(): SupportedLanguage {
        return this.currentLanguage;
    }

    t(key: string, variables?: Record<string, string>): string {
        const keys = key.split('.');
        let value: any = this.strings[this.currentLanguage];

        for (const k of keys) {
            if (value && typeof value === 'object' && k in value) {
                value = value[k];
            } else {
                // Fallback to English if key not found
                value = this.strings.en;
                for (const fallbackKey of keys) {
                    if (value && typeof value === 'object' && fallbackKey in value) {
                        value = value[fallbackKey];
                    } else {
                        return `[Missing: ${key}]`;
                    }
                }
                break;
            }
        }

        if (typeof value !== 'string') {
            return `[Invalid: ${key}]`;
        }

        // Replace variables
        if (variables) {
            for (const [varKey, varValue] of Object.entries(variables)) {
                value = value.replace(new RegExp(`{{${varKey}}}`, 'g'), varValue);
            }
        }

        return value;
    }

    // Convenience methods for common translations
    getSettingsStrings() {
        return this.strings[this.currentLanguage].settings;
    }

    getCommandStrings() {
        return this.strings[this.currentLanguage].commands;
    }

    getNotificationStrings() {
        return this.strings[this.currentLanguage].notifications;
    }

    getStatusBarStrings() {
        return this.strings[this.currentLanguage].statusBar;
    }

    getModalStrings() {
        return this.strings[this.currentLanguage].modals;
    }
}
