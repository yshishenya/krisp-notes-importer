import { App, PluginSettingTab, Setting, Plugin, Notice, Modal } from 'obsidian';
import { DEFAULT_SETTINGS } from '../interfaces';
import { LocalizationService, SupportedLanguage } from '../core/LocalizationService';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞
interface KrispNotesImporterPlugin extends Plugin {
    settingsManager: {
        getSetting: (key: string) => any;
        updateSetting: (key: string, value: any) => Promise<void>;
    };
    localizationService?: LocalizationService;
}

export class KrispSettingsTab extends PluginSettingTab {
    plugin: KrispNotesImporterPlugin;
    private localization: LocalizationService;

    constructor(app: App, plugin: KrispNotesImporterPlugin) {
        super(app, plugin);
        this.plugin = plugin;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é
        const currentLanguage = this.plugin.settingsManager.getSetting('language') as SupportedLanguage || 'en';
        this.localization = plugin.localizationService || new LocalizationService(currentLanguage);
    }

    private updateLanguage(newLanguage: SupportedLanguage): void {
        this.localization.setLanguage(newLanguage);
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
        this.display();
    }

    display(): void {
        const { containerEl } = this;

        containerEl.empty();

        containerEl.createEl('h1', { text: this.localization.t('settings.title') });
        containerEl.createEl('p', {
            text: this.localization.t('settings.title') + ' - ' + this.localization.t('settings.sections.basic')
        });

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É)
        new Setting(containerEl)
            .setName(this.localization.t('settings.fields.language.name'))
            .setDesc(this.localization.t('settings.fields.language.desc'))
            .addDropdown(dropdown => dropdown
                .addOption('en', 'English')
                .addOption('ru', '–†—É—Å—Å–∫–∏–π')
                .setValue(this.plugin.settingsManager.getSetting('language'))
                .onChange(async (value: SupportedLanguage) => {
                    await this.plugin.settingsManager.updateSetting('language', value);
                    this.updateLanguage(value);
                }));

        // –°–µ–∫—Ü–∏—è: –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        containerEl.createEl('h2', { text: 'üîß ' + this.localization.t('settings.sections.basic') });

        new Setting(containerEl)
            .setName(this.localization.t('settings.fields.watchedFolder.name'))
            .setDesc(this.localization.t('settings.fields.watchedFolder.desc'))
            .addText(text => text
                .setPlaceholder('/Users/username/Downloads/Krisp')
                .setValue(this.plugin.settingsManager.getSetting('watchedFolderPath'))
                .onChange(async (value) => {
                    await this.plugin.settingsManager.updateSetting('watchedFolderPath', value);
                }));

        new Setting(containerEl)
            .setName('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ')
            .setDesc('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏ (—Ç—Ä–µ–±—É–µ—Ç FileWatcherService)')
            .addToggle(toggle => toggle
                .setValue(this.plugin.settingsManager.getSetting('autoScanEnabled'))
                .onChange(async (value) => {
                    await this.plugin.settingsManager.updateSetting('autoScanEnabled', value);
                }));

        // –°–µ–∫—Ü–∏—è: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Obsidian
        containerEl.createEl('h2', { text: 'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Obsidian' });

        new Setting(containerEl)
            .setName('–ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫')
            .setDesc('–ü—É—Ç—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Obsidian –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Markdown-–∑–∞–º–µ—Ç–æ–∫')
            .addText(text => text
                .setPlaceholder('KrispNotes/Notes')
                .setValue(this.plugin.settingsManager.getSetting('notesFolderPath'))
                .onChange(async (value) => {
                    await this.plugin.settingsManager.updateSetting('notesFolderPath', value);
                }));

        new Setting(containerEl)
            .setName('–ü–∞–ø–∫–∞ –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤')
            .setDesc('–ü—É—Ç—å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Obsidian –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–µ–π')
            .addText(text => text
                .setPlaceholder('KrispNotes/Attachments')
                .setValue(this.plugin.settingsManager.getSetting('attachmentsFolderPath'))
                .onChange(async (value) => {
                    await this.plugin.settingsManager.updateSetting('attachmentsFolderPath', value);
                }));

        // –°–µ–∫—Ü–∏—è: –®–∞–±–ª–æ–Ω—ã –∏ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        containerEl.createEl('h2', { text: 'üè∑Ô∏è –®–∞–±–ª–æ–Ω—ã –∏ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' });

        new Setting(containerEl)
            .setName('–®–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ –∑–∞–º–µ—Ç–æ–∫')
            .setDesc('–§–æ—Ä–º–∞—Ç –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –∑–∞–º–µ—Ç–æ–∫. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {{YYYY}}, {{MM}}, {{DD}}, {{HHMM}}, {{meetingTitle}}')
            .addText(text => text
                .setPlaceholder('{{YYYY}}-{{MM}}-{{DD}}_{{HHMM}}_{{meetingTitle}}')
                .setValue(this.plugin.settingsManager.getSetting('noteNameTemplate'))
                .onChange(async (value) => {
                    await this.plugin.settingsManager.updateSetting('noteNameTemplate', value);
                }));

        new Setting(containerEl)
            .setName('–®–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤')
            .setDesc('–§–æ—Ä–º–∞—Ç –∏–º–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —á—Ç–æ –∏ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫')
            .addText(text => text
                .setPlaceholder('{{YYYY}}-{{MM}}-{{DD}}_{{meetingTitle}}_audio')
                .setValue(this.plugin.settingsManager.getSetting('attachmentNameTemplate'))
                .onChange(async (value) => {
                    await this.plugin.settingsManager.updateSetting('attachmentNameTemplate', value);
                }));

        // –°–µ–∫—Ü–∏—è: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        containerEl.createEl('h2', { text: 'üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤' });

        new Setting(containerEl)
            .setName('–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö')
            .setDesc('–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–º–µ—Ç–∫–∏ —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º')
            .addDropdown(dropdown => dropdown
                .addOption('skip', '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç')
                .addOption('overwrite', '–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é')
                .addOption('rename', '–°–æ–∑–¥–∞—Ç—å —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)')
                .setValue(this.plugin.settingsManager.getSetting('duplicateStrategy'))
                .onChange(async (value: 'skip' | 'overwrite' | 'rename') => {
                    await this.plugin.settingsManager.updateSetting('duplicateStrategy', value);
                }));

        // –°–µ–∫—Ü–∏—è: –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
        containerEl.createEl('h2', { text: '‚ö° –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞' });

        new Setting(containerEl)
            .setName('–û—Ç–∫—Ä—ã–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É')
            .setDesc('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–º–µ—Ç–∫—É –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞')
            .addToggle(toggle => toggle
                .setValue(this.plugin.settingsManager.getSetting('openNoteAfterImport'))
                .onChange(async (value) => {
                    await this.plugin.settingsManager.updateSetting('openNoteAfterImport', value);
                }));

        new Setting(containerEl)
            .setName('–£–¥–∞–ª—è—Ç—å ZIP-—Ñ–∞–π–ª')
            .setDesc('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π ZIP-–∞—Ä—Ö–∏–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞')
            .addToggle(toggle => toggle
                .setValue(this.plugin.settingsManager.getSetting('deleteZipAfterImport'))
                .onChange(async (value) => {
                    await this.plugin.settingsManager.updateSetting('deleteZipAfterImport', value);
                }));

        // –°–µ–∫—Ü–∏—è: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        containerEl.createEl('h2', { text: 'üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' });

        new Setting(containerEl)
            .setName('–Ø–∑—ã–∫ –¥–ª—è –¥–∞—Ç')
            .setDesc('–Ø–∑—ã–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –≤—Å—Ç—Ä–µ—á')
            .addDropdown(dropdown => dropdown
                .addOption('en', 'English')
                .addOption('ru', '–†—É—Å—Å–∫–∏–π')
                .setValue(this.plugin.settingsManager.getSetting('language'))
                .onChange(async (value) => {
                    await this.plugin.settingsManager.updateSetting('language', value);
                }));

        new Setting(containerEl)
            .setName('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫')
            .setDesc('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–≥–∏–Ω–∞')
            .addButton(button => button
                .setButtonText('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
                .setClass('mod-cta')
                .onClick(async () => {
                    // –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ validateSettings –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    const plugin = this.plugin as any;
                    if (plugin.settingsManager.validateSettings) {
                        const validation = plugin.settingsManager.validateSettings();
                        if (validation.isValid) {
                            new Notice('‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!', 5000);
                        } else {
                            new Notice(`‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:\n${validation.errors.join('\n')}`, 10000);
                            console.error('[Krisp Importer] –û—à–∏–±–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', validation.errors);
                        }
                    } else {
                        new Notice('‚ö†Ô∏è –ú–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 3000);
                    }
                }));

        new Setting(containerEl)
            .setName('–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø–ª–∞–≥–∏–Ω–∞')
            .setDesc('–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º')
            .addButton(button => button
                .setButtonText('–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏')
                .onClick(async () => {
                    const plugin = this.plugin as any;
                    if (plugin.loggingService) {
                        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤
                        const modal = new (class extends Modal {
                            constructor(app: App) {
                                super(app);
                            }

                            onOpen() {
                                const { contentEl } = this;
                                contentEl.createEl('h2', { text: 'üìã –õ–æ–≥–∏ –ø–ª–∞–≥–∏–Ω–∞ Krisp Notes Importer' });

                                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤
                                const stats = plugin.loggingService.getLogStats();
                                const statsEl = contentEl.createEl('div');
                                statsEl.style.marginBottom = '15px';
                                statsEl.style.padding = '10px';
                                statsEl.style.backgroundColor = 'var(--background-secondary)';
                                statsEl.style.borderRadius = '5px';

                                statsEl.createEl('p', { text: `üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${stats.total}` });
                                const levelStats = Object.entries(stats.byLevel)
                                    .map(([level, count]) => `${level}: ${count}`)
                                    .join(', ');
                                statsEl.createEl('p', { text: `üìà –ü–æ —É—Ä–æ–≤–Ω—è–º: ${levelStats}` });

                                // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                                const buttonContainer = contentEl.createEl('div');
                                buttonContainer.style.display = 'flex';
                                buttonContainer.style.gap = '10px';
                                buttonContainer.style.marginBottom = '15px';

                                const copyBtn = buttonContainer.createEl('button', { text: 'üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏' });
                                copyBtn.className = 'mod-cta';
                                copyBtn.onclick = async () => {
                                    await plugin.loggingService.copyLogsToClipboard();
                                };

                                const clearBtn = buttonContainer.createEl('button', { text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏' });
                                clearBtn.className = 'mod-warning';
                                clearBtn.onclick = () => {
                                    plugin.loggingService.clearLogs();
                                    this.close();
                                    new Notice('üóëÔ∏è –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã', 3000);
                                };

                                const closeBtn = buttonContainer.createEl('button', { text: '–ó–∞–∫—Ä—ã—Ç—å' });
                                closeBtn.onclick = () => this.close();

                                // –û–±–ª–∞—Å—Ç—å —Å –ª–æ–≥–∞–º–∏
                                const logsContainer = contentEl.createEl('div');
                                logsContainer.style.maxHeight = '400px';
                                logsContainer.style.overflow = 'auto';
                                logsContainer.style.border = '1px solid var(--background-modifier-border)';
                                logsContainer.style.borderRadius = '5px';
                                logsContainer.style.padding = '10px';
                                logsContainer.style.backgroundColor = 'var(--background-primary-alt)';
                                logsContainer.style.fontFamily = 'monospace';
                                logsContainer.style.fontSize = '0.8em';
                                logsContainer.style.whiteSpace = 'pre-wrap';

                                const recentLogs = plugin.loggingService.getRecentLogs(100);
                                if (recentLogs.length === 0) {
                                    logsContainer.textContent = '–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç';
                                } else {
                                                                        const logsText = recentLogs.map((entry: any) => {
                                        const timestamp = entry.timestamp.toLocaleString();
                                        const level = entry.level === 0 ? 'DEBUG' :
                                                     entry.level === 1 ? 'INFO' :
                                                     entry.level === 2 ? 'WARN' : 'ERROR';
                                        return `[${timestamp}] [${level}] [${entry.category}] ${entry.message}`;
                                    }).join('\n');
                                    logsContainer.textContent = logsText;
                                }
                            }

                            onClose() {
                                const { contentEl } = this;
                                contentEl.empty();
                            }
                        })(this.app);

                        modal.open();
                    } else {
                        new Notice('‚ùå LoggingService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 5000);
                    }
                }));

        new Setting(containerEl)
            .setName('–ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤')
            .setDesc('–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ ZIP-—Ñ–∞–π–ª—ã –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –ø–∞–ø–∫–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å')
            .addButton(button => button
                .setButtonText('–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ')
                .setClass('mod-warning')
                .onClick(async () => {
                    const plugin = this.plugin as any;
                    const watchedFolder = plugin.settingsManager.getSetting('watchedFolderPath');

                    if (!watchedFolder) {
                        new Notice('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–∞—è –ø–∞–ø–∫–∞', 5000);
                        return;
                    }

                    new Notice('üîÑ –ù–∞—á–∏–Ω–∞—é –º–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç...', 3000);

                    try {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º FileWatcherService –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                        if (plugin.fileWatcher && plugin.fileWatcher.scanExistingFiles) {
                            await plugin.fileWatcher.scanExistingFiles();
                            new Notice('‚úÖ –ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!', 5000);
                        } else {
                            new Notice('‚ùå FileWatcherService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 5000);
                        }
                    } catch (error) {
                        console.error('[Krisp Importer] –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞:', error);
                        new Notice(`‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`, 8000);
                    }
                }));

        new Setting(containerEl)
            .setName('–¢–µ—Å—Ç–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç')
            .setDesc('–í—ã–±—Ä–∞—Ç—å ZIP-—Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏')
            .addButton(button => button
                .setButtonText('–¢–µ—Å—Ç–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç')
                .onClick(async () => {
                                        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
                    const plugin = this.plugin;
                    const modal = new (class extends Modal {
                        result: string = '';

                        constructor(app: App) {
                            super(app);
                        }

                        onOpen() {
                            const { contentEl } = this;
                            contentEl.createEl('h2', { text: '–¢–µ—Å—Ç–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç ZIP-—Ñ–∞–π–ª–∞' });

                            contentEl.createEl('p', {
                                text: '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ ZIP-—Ñ–∞–π–ª—É Krisp –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞:'
                            });

                            const inputEl = contentEl.createEl('input', {
                                type: 'text',
                                placeholder: '/path/to/meeting.zip'
                            });
                            inputEl.style.width = '100%';
                            inputEl.style.marginBottom = '10px';

                            const buttonContainer = contentEl.createEl('div');
                            buttonContainer.style.display = 'flex';
                            buttonContainer.style.gap = '10px';
                            buttonContainer.style.justifyContent = 'flex-end';

                            const importBtn = buttonContainer.createEl('button', { text: '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å' });
                            importBtn.className = 'mod-cta';
                            importBtn.onclick = async () => {
                                const filePath = inputEl.value.trim();
                                if (filePath) {
                                    this.result = filePath;
                                    this.close();

                                    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω
                                    const pluginInstance = plugin as any;
                                    if (pluginInstance && pluginInstance.processingService) {
                                        try {
                                            new Notice('üß™ –í—ã–ø–æ–ª–Ω—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç...', 3000);
                                            await pluginInstance.processingService.processZipFile(filePath);
                                            new Notice('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 5000);
                                        } catch (error) {
                                            console.error('[Krisp Importer] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞:', error);
                                            new Notice(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`, 8000);
                                        }
                                    } else {
                                        new Notice('‚ùå ProcessingService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 5000);
                                    }
                                }
                            };

                            const cancelBtn = buttonContainer.createEl('button', { text: '–û—Ç–º–µ–Ω–∞' });
                            cancelBtn.onclick = () => this.close();

                            inputEl.focus();
                            inputEl.addEventListener('keypress', (e: KeyboardEvent) => {
                                if (e.key === 'Enter') {
                                    importBtn.click();
                                }
                            });
                        }

                        onClose() {
                            const { contentEl } = this;
                            contentEl.empty();
                        }
                    })(this.app);

                    modal.open();
                }));

        // –°–µ–∫—Ü–∏—è: –®–∞–±–ª–æ–Ω —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        containerEl.createEl('h2', { text: 'üìù –®–∞–±–ª–æ–Ω —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∑–∞–º–µ—Ç–∫–∏' });

        const templateDesc = containerEl.createEl('p', {
            text: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –∑–∞–º–µ—Ç–æ–∫. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {{meetingTitle}}, {{date}}, {{time}}, {{participants}}, {{summary}}, {{actionItems}}, {{keyPoints}}, {{formattedTranscript}}, {{audioPathForYaml}} –∏ –¥—Ä—É–≥–∏–µ.'
        });
        templateDesc.style.fontSize = '0.9em';
        templateDesc.style.color = 'var(--text-muted)';

        new Setting(containerEl)
            .setName('–®–∞–±–ª–æ–Ω –∑–∞–º–µ—Ç–∫–∏')
            .setDesc('')
            .addTextArea(text => {
                text.inputEl.rows = 10;
                text.inputEl.style.width = '100%';
                text.inputEl.style.fontFamily = 'monospace';
                text.inputEl.style.fontSize = '0.85em';
                return text
                    .setPlaceholder('–í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω –∑–∞–º–µ—Ç–∫–∏...')
                    .setValue(this.plugin.settingsManager.getSetting('noteContentTemplate'))
                    .onChange(async (value) => {
                        await this.plugin.settingsManager.updateSetting('noteContentTemplate', value);
                    });
            });

        new Setting(containerEl)
            .setName('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
            .setDesc('–í–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –∑–∞–º–µ—Ç–∫–∏')
            .addButton(button => button
                .setButtonText('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
                .setCta()
                .onClick(async () => {
                    await this.plugin.settingsManager.updateSetting('noteContentTemplate', DEFAULT_SETTINGS.noteContentTemplate);
                    this.display(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                }));

        // –°–µ–∫—Ü–∏—è: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        containerEl.createEl('h2', { text: 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏' });

        new Setting(containerEl)
            .setName('–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
            .setDesc('–í–µ—Ä–Ω—É—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
            .addButton(button => button
                .setButtonText('–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
                .setClass('mod-warning')
                .onClick(async () => {
                    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞
                    const plugin = this.plugin;
                    const confirmModal = new (class extends Modal {
                        constructor(app: App) {
                            super(app);
                        }

                        onOpen() {
                            const { contentEl } = this;
                            contentEl.createEl('h2', { text: '‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞' });

                            contentEl.createEl('p', {
                                text: '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.'
                            });

                            const buttonContainer = contentEl.createEl('div');
                            buttonContainer.style.display = 'flex';
                            buttonContainer.style.gap = '10px';
                            buttonContainer.style.justifyContent = 'flex-end';
                            buttonContainer.style.marginTop = '20px';

                            const resetBtn = buttonContainer.createEl('button', { text: '–°–±—Ä–æ—Å–∏—Ç—å' });
                            resetBtn.className = 'mod-warning';
                            resetBtn.onclick = async () => {
                                this.close();

                                                                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω
                                const pluginInstance = plugin as any;
                                if (pluginInstance && pluginInstance.settingsManager) {
                                    try {
                                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                        for (const [key, value] of Object.entries(DEFAULT_SETTINGS)) {
                                            await pluginInstance.settingsManager.updateSetting(key, value);
                                        }

                                        new Notice('‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é', 5000);

                                        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
                                        const settingsTab = pluginInstance.settingsTab;
                                        if (settingsTab && settingsTab.display) {
                                            settingsTab.display();
                                        }
                                    } catch (error) {
                                        console.error('[Krisp Importer] –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
                                        new Notice(`‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`, 8000);
                                    }
                                } else {
                                    new Notice('‚ùå –ü–ª–∞–≥–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 5000);
                                }
                            };

                            const cancelBtn = buttonContainer.createEl('button', { text: '–û—Ç–º–µ–Ω–∞' });
                            cancelBtn.onclick = () => this.close();
                        }

                        onClose() {
                            const { contentEl } = this;
                            contentEl.empty();
                        }
                    })(this.app);

                    confirmModal.open();
                }));

        // –°–µ–∫—Ü–∏—è: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
        containerEl.createEl('h2', { text: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–≥–∏–Ω–µ' });

        const versionInfo = containerEl.createEl('div');
        versionInfo.createEl('p', { text: 'üéØ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: v3.0.1 - –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å' });
        versionInfo.createEl('p', { text: '‚úÖ –†—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç: –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç' });
        versionInfo.createEl('p', { text: '‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ' });
        versionInfo.createEl('p', { text: '‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –î–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ UI' });
        versionInfo.createEl('p', { text: '‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: –í–∫–ª—é—á–µ–Ω–∞' });

        const statusNote = containerEl.createEl('div');
        statusNote.style.padding = '15px';
        statusNote.style.backgroundColor = 'var(--background-secondary)';
        statusNote.style.borderRadius = '8px';
        statusNote.style.marginTop = '15px';
        statusNote.style.border = '1px solid var(--background-modifier-border)';

        statusNote.createEl('h4', { text: 'üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:' });
        statusNote.createEl('p', { text: '‚Ä¢ "Import ZIP file manually" - —Ä—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞' });
        statusNote.createEl('p', { text: '‚Ä¢ "Start auto-watching folder" - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è' });
        statusNote.createEl('p', { text: '‚Ä¢ "Stop auto-watching" - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è' });
        statusNote.createEl('p', { text: '‚Ä¢ "Scan existing files in folder" - –º–∞—Å—Å–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ' });

        const tipNote = containerEl.createEl('div');
        tipNote.style.padding = '10px';
        tipNote.style.backgroundColor = 'var(--background-primary-alt)';
        tipNote.style.borderRadius = '5px';
        tipNote.style.marginTop = '10px';
        tipNote.style.borderLeft = '4px solid var(--interactive-accent)';
        tipNote.createEl('p', {
            text: 'üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–ª–∏—Ç—Ä—É –∫–æ–º–∞–Ω–¥ (Ctrl/Cmd + P) –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø–ª–∞–≥–∏–Ω–∞'
        });
    }
}
